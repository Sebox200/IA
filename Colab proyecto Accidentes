{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sebox200/IA/blob/main/Colab%20proyecto%20Accidentes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents"
      ],
      "metadata": {
        "id": "WdYwRXWSHmpx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install kaggle\n"
      ],
      "metadata": {
        "id": "fM6z0YJFyKHT",
        "outputId": "43226892-b3da-46f4-f42c-99eaf409553a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.7.4.2)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: certifi>=14.05.14 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2025.1.31)\n",
            "Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.4.1)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.10)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from kaggle) (5.29.4)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: setuptools>=21.0.0 in /usr/local/lib/python3.11/dist-packages (from kaggle) (75.1.0)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: text-unidecode in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: urllib3>=1.15.1 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.3.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from kaggle) (0.5.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.upload()"
      ],
      "metadata": {
        "id": "Ldlvy8OQyOz4",
        "outputId": "0f83b27b-b53c-4443-eb76-7f0eeee05ea2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-de140542-d784-43f4-bba8-682b83166910\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-de140542-d784-43f4-bba8-682b83166910\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle.json': b'{\"username\":\"sebasrod123\",\"key\":\"09d96a9852549a742be9e7f7e20046e9\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir -p ~/.kaggle\n",
        "!mv kaggle.json ~/.kaggle/\n",
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "metadata": {
        "id": "BfSlQpokyhNo",
        "collapsed": true,
        "outputId": "ed9ab766-1e10-4a1d-a43e-6fb5b75ce917",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mv: cannot stat 'kaggle.json': No such file or directory\n",
            "chmod: cannot access '/root/.kaggle/kaggle.json': No such file or directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle datasets download -d sobhanmoosavi/us-accidents\n"
      ],
      "metadata": {
        "id": "LmRvZgSRyj5Q",
        "outputId": "d87ed2ae-62ef-4f02-d06c-fbf4e2ab5be8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/sobhanmoosavi/us-accidents\n",
            "License(s): CC-BY-NC-SA-4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip us-accidents.zip\n"
      ],
      "metadata": {
        "id": "BG9p22kxypZW",
        "outputId": "b52a23de-1642-4787-f203-1ee2a1cf53b8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  us-accidents.zip\n",
            "  inflating: US_Accidents_March23.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"US_Accidents_March23.csv\")  # Reemplaza con el nombre del archivo correcto\n",
        "df.head()  # Muestra las primeras filas\n"
      ],
      "metadata": {
        "id": "-yqTpxwhzG2j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.listdir()\n"
      ],
      "metadata": {
        "id": "uPraShRw0qYC",
        "outputId": "04580625-44bc-402a-f061-3d96c158fac3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['.config',\n",
              " '.ipynb_checkpoints',\n",
              " 'us-accidents.zip',\n",
              " 'US_Accidents_March23.csv',\n",
              " 'sample_data']"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Cargar solo las primeras 100,000 filas\n",
        "df = pd.read_csv(\"US_Accidents_March23.csv\", nrows=100000)\n",
        "\n",
        "# Mostrar las primeras filas\n",
        "df.head()\n",
        "\n"
      ],
      "metadata": {
        "id": "v3nXthM60u2i",
        "outputId": "a2ccb219-9101-497a-dc3b-2491b9e2c73e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    ID   Source  Severity           Start_Time             End_Time  \\\n",
              "0  A-1  Source2         3  2016-02-08 05:46:00  2016-02-08 11:00:00   \n",
              "1  A-2  Source2         2  2016-02-08 06:07:59  2016-02-08 06:37:59   \n",
              "2  A-3  Source2         2  2016-02-08 06:49:27  2016-02-08 07:19:27   \n",
              "3  A-4  Source2         3  2016-02-08 07:23:34  2016-02-08 07:53:34   \n",
              "4  A-5  Source2         2  2016-02-08 07:39:07  2016-02-08 08:09:07   \n",
              "\n",
              "   Start_Lat  Start_Lng  End_Lat  End_Lng  Distance(mi)  ... Roundabout  \\\n",
              "0  39.865147 -84.058723      NaN      NaN          0.01  ...      False   \n",
              "1  39.928059 -82.831184      NaN      NaN          0.01  ...      False   \n",
              "2  39.063148 -84.032608      NaN      NaN          0.01  ...      False   \n",
              "3  39.747753 -84.205582      NaN      NaN          0.01  ...      False   \n",
              "4  39.627781 -84.188354      NaN      NaN          0.01  ...      False   \n",
              "\n",
              "  Station   Stop Traffic_Calming Traffic_Signal Turning_Loop Sunrise_Sunset  \\\n",
              "0   False  False           False          False        False          Night   \n",
              "1   False  False           False          False        False          Night   \n",
              "2   False  False           False           True        False          Night   \n",
              "3   False  False           False          False        False          Night   \n",
              "4   False  False           False           True        False            Day   \n",
              "\n",
              "  Civil_Twilight Nautical_Twilight Astronomical_Twilight  \n",
              "0          Night             Night                 Night  \n",
              "1          Night             Night                   Day  \n",
              "2          Night               Day                   Day  \n",
              "3            Day               Day                   Day  \n",
              "4            Day               Day                   Day  \n",
              "\n",
              "[5 rows x 46 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7a0a5f87-7d8b-4853-a710-5a2bc703c9d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Source</th>\n",
              "      <th>Severity</th>\n",
              "      <th>Start_Time</th>\n",
              "      <th>End_Time</th>\n",
              "      <th>Start_Lat</th>\n",
              "      <th>Start_Lng</th>\n",
              "      <th>End_Lat</th>\n",
              "      <th>End_Lng</th>\n",
              "      <th>Distance(mi)</th>\n",
              "      <th>...</th>\n",
              "      <th>Roundabout</th>\n",
              "      <th>Station</th>\n",
              "      <th>Stop</th>\n",
              "      <th>Traffic_Calming</th>\n",
              "      <th>Traffic_Signal</th>\n",
              "      <th>Turning_Loop</th>\n",
              "      <th>Sunrise_Sunset</th>\n",
              "      <th>Civil_Twilight</th>\n",
              "      <th>Nautical_Twilight</th>\n",
              "      <th>Astronomical_Twilight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A-1</td>\n",
              "      <td>Source2</td>\n",
              "      <td>3</td>\n",
              "      <td>2016-02-08 05:46:00</td>\n",
              "      <td>2016-02-08 11:00:00</td>\n",
              "      <td>39.865147</td>\n",
              "      <td>-84.058723</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.01</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Night</td>\n",
              "      <td>Night</td>\n",
              "      <td>Night</td>\n",
              "      <td>Night</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A-2</td>\n",
              "      <td>Source2</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-02-08 06:07:59</td>\n",
              "      <td>2016-02-08 06:37:59</td>\n",
              "      <td>39.928059</td>\n",
              "      <td>-82.831184</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.01</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Night</td>\n",
              "      <td>Night</td>\n",
              "      <td>Night</td>\n",
              "      <td>Day</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A-3</td>\n",
              "      <td>Source2</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-02-08 06:49:27</td>\n",
              "      <td>2016-02-08 07:19:27</td>\n",
              "      <td>39.063148</td>\n",
              "      <td>-84.032608</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.01</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>Night</td>\n",
              "      <td>Night</td>\n",
              "      <td>Day</td>\n",
              "      <td>Day</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>A-4</td>\n",
              "      <td>Source2</td>\n",
              "      <td>3</td>\n",
              "      <td>2016-02-08 07:23:34</td>\n",
              "      <td>2016-02-08 07:53:34</td>\n",
              "      <td>39.747753</td>\n",
              "      <td>-84.205582</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.01</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Night</td>\n",
              "      <td>Day</td>\n",
              "      <td>Day</td>\n",
              "      <td>Day</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>A-5</td>\n",
              "      <td>Source2</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-02-08 07:39:07</td>\n",
              "      <td>2016-02-08 08:09:07</td>\n",
              "      <td>39.627781</td>\n",
              "      <td>-84.188354</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.01</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>Day</td>\n",
              "      <td>Day</td>\n",
              "      <td>Day</td>\n",
              "      <td>Day</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 46 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a0a5f87-7d8b-4853-a710-5a2bc703c9d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7a0a5f87-7d8b-4853-a710-5a2bc703c9d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7a0a5f87-7d8b-4853-a710-5a2bc703c9d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1c4f7e1f-3202-476d-ae72-3225b9aea7c6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c4f7e1f-3202-476d-ae72-3225b9aea7c6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1c4f7e1f-3202-476d-ae72-3225b9aea7c6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔹 Importar librerías\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# 🔹 Cargar solo las columnas importantes\n",
        "columnas_utiles = ['Start_Time', 'Severity', 'Temperature(F)', 'Humidity(%)', 'Visibility(mi)', 'Wind_Speed(mph)']\n",
        "df = pd.read_csv(\"US_Accidents_March23.csv\", usecols=columnas_utiles, nrows=500000)\n",
        "\n",
        "# 🔹 Convertir la fecha en variables útiles\n",
        "df['Start_Time'] = pd.to_datetime(df['Start_Time'], errors='coerce')\n",
        "df.dropna(subset=['Start_Time'], inplace=True)\n",
        "df['hour'] = df['Start_Time'].dt.hour\n",
        "df['day_of_week'] = df['Start_Time'].dt.weekday\n",
        "\n",
        "# 🔹 Eliminar valores nulos\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "# 🔹 Variables predictoras (X) y objetivo (y)\n",
        "X = df[['hour', 'day_of_week', 'Temperature(F)', 'Humidity(%)', 'Visibility(mi)', 'Wind_Speed(mph)']]\n",
        "y = df['Severity']\n",
        "\n",
        "# 🔹 División en datos de entrenamiento y prueba\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🔹 Normalización de datos\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# 🔹 Entrenamiento del modelo\n",
        "modelo = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "modelo.fit(X_train, y_train)\n",
        "\n",
        "# 🔹 Predicción\n",
        "y_pred = modelo.predict(X_test)\n",
        "\n",
        "# 🔹 Evaluación del modelo\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f'✅ Accuracy: {accuracy:.2f}')\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# 🔹 Matriz de Confusión\n",
        "plt.figure(figsize=(6,4))\n",
        "sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.xlabel(\"Predicho\")\n",
        "plt.ylabel(\"Real\")\n",
        "plt.title(\"Matriz de Confusión - Predicción de Accidentes\")\n",
        "plt.show()\n",
        "\n",
        "# 🔹 Visualización de Importancia de Variables\n",
        "importances = modelo.feature_importances_\n",
        "plt.figure(figsize=(10,5))\n",
        "sns.barplot(x=X.columns, y=importances, palette=\"viridis\")\n",
        "plt.xlabel('Características')\n",
        "plt.ylabel('Importancia')\n",
        "plt.title('🚦 Importancia de Variables en la Predicción de Accidentes')\n",
        "plt.show()\n",
        "\n",
        "# 🔹 Análisis Exploratorio Adicional\n",
        "plt.figure(figsize=(10,5))\n",
        "sns.countplot(x=df['hour'], palette=\"coolwarm\")\n",
        "plt.xlabel(\"Hora del Día\")\n",
        "plt.ylabel(\"Cantidad de Accidentes\")\n",
        "plt.title(\"⏰ Accidentes por Hora del Día\")\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "-dN9aGt60Obd",
        "outputId": "fac35669-287a-4cea-c82d-102282408443",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Accuracy: 0.63\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.00      0.00      0.00        65\n",
            "           2       0.68      0.79      0.73     50979\n",
            "           3       0.51      0.38      0.44     30250\n",
            "           4       0.18      0.04      0.07        46\n",
            "\n",
            "    accuracy                           0.63     81340\n",
            "   macro avg       0.34      0.30      0.31     81340\n",
            "weighted avg       0.62      0.63      0.62     81340\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg8AAAGJCAYAAAANJND6AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAa8BJREFUeJzt3XdYFFcXBvB3aUtdFOnBgg3FRkRF7AUliEbsxoaIGhU0ii0mRmwRS6yxJwaMvZvYUESxRGwosfeCjaIIKNKZ7w8/Jq6AsCuwyr6/PPtE7pyZOTMsu2fv3DsrEQRBABEREVEhaag6ASIiIvq8sHggIiIihbB4ICIiIoWweCAiIiKFsHggIiIihbB4ICIiIoWweCAiIiKFsHggIiIihbB4IPq/nTt34pdffkFWVpaqU6H/S0tLw6xZs3Dw4EFVp0JE72DxUMSmTp0KiURSrPuQSCSYOnVqse6jpM2bNw+VK1eGpqYmHBwcinz7AwcORKVKlfJdfurUKfTt2xf29vbQ1NQs8v1/LvJ6/laqVAkDBw4slv0V9Fz28/PDhg0b4OTkVCz7f19Bz5PPwYMHDyCRSBAUFFRgbGk4XlKNz7Z4CAoKgkQigUQiwcmTJ3MtFwQB5cuXh0QiQceOHZXax6xZs7B79+6PzPTzkJWVhcDAQLRq1QomJiaQSqWoVKkSvLy8cP78+WLd96FDhzBhwgQ0bdoUgYGBmDVrVrHu730vXrxA7969sWTJEnTo0KFE9/2+nOe0RCKBhoYGrK2t0b59e4SFhak0L1XYunUrdu/ejQMHDqBMmTKqTuejTZgwARKJBL169VJ1KiXq2rVrmDp1Kh48eKDqVKgIaak6gY+lq6uLjRs3olmzZnLtx44dw+PHjyGVSpXe9qxZs9C9e3d4eHgUep3Jkyfj+++/V3qfqpCSkoKuXbsiODgYLVq0wA8//AATExM8ePAAW7duxdq1axEVFQUbG5ti2f+RI0egoaGBNWvWQEdHp1j28dtvvyE7OzvPZRcvXsTMmTMxYMCAYtm3otq1a4cBAwZAEATcv38fy5cvR5s2bbBv3z64ubmVeD43b96EhkbxfM5ISUmBllbulyFBEPD48WMcOHAAFSpUKJZ9lyRBELBp0yZUqlQJe/bswatXr2BkZFQs+6pYsSJSUlKgra1dLNtX1LVr1zBt2jS0atWKvRylyGdfPHTo0AHbtm3DkiVL5F6ENm7cCEdHRzx//rxE8khOToaBgQG0tLTyfDH8lI0fPx7BwcFYuHAhRo8eLbfM398fCxcuLNb9x8bGQk9Pr9gKBwAffCF1cXEptv0qo3r16ujXr5/4c5cuXVC3bl0sWrQo3+IhNTUVOjo6xfIm/zEFeEF0dXXzbJdIJPDz8yu2/Za0sLAwPH78GEeOHIGrqyt27twJT0/PYtmXRCLJ97wSFZXP9rJFjm+++QYvXrxASEiI2Jaeno7t27ejT58+ea7zyy+/oEmTJihXrhz09PTg6OiI7du3y8VIJBIkJydj7dq1YjdyznXfnOvC165dQ58+fVC2bFmx5+P9a8YDBw6U64p+91HQuIW0tDSMGTMGZmZmMDIywtdff43Hjx/nGfvkyRMMGjQIFhYWkEqlqFWrFv7444+CTh8eP36MVatWoV27drkKBwDQ1NTEuHHj5HodLl68CDc3N8hkMhgaGqJt27Y4ffq03Ho5l5X++ecf+Pn5wczMDAYGBujSpQvi4uLEOIlEgsDAQCQnJ4vnJSgo6IPXbd8/d69evcLo0aNRqVIlSKVSmJubo127drhw4YIYk9e13eTkZIwdOxbly5eHVCqFnZ0dfvnlF7z/RbMSiQS+vr7YvXs3ateuLZ7f4ODgAs9vUahTpw5MTU1x//59AG/fiCQSCTZv3ozJkyfjiy++gL6+PpKSkgAAZ86cwVdffQVjY2Po6+ujZcuW+Oeff3Jt9+TJk2jYsCF0dXVRpUoVrFq1Ks/95zXmISEhAWPGjBHPuY2NDQYMGCBXrKempmLq1KmoXr06dHV1YWVlha5du+Lu3btiTF5/B0X5/PqQnN+nrq4uateujV27duUZl52djUWLFqFWrVrQ1dWFhYUFvv32W7x8+bJQ+wGADRs2wN7eHq1bt4aLiws2bNiQZ9yTJ0/g7e0Na2trSKVS2NraYvjw4UhPTxdjCjr3+f3tFPXxVqpUCR07dsTJkyfRqFEj6OrqonLlyvjzzz/FmKCgIPTo0QMA0Lp1a/Fv/N3LcAcOHEDz5s1hYGAAIyMjuLu74+rVq3L7io6OhpeXF2xsbCCVSmFlZYXOnTvzUogKfV4fkfNQqVIlODs7Y9OmTeKnsgMHDiAxMVG8jv2+xYsX4+uvv0bfvn2Rnp6OzZs3o0ePHti7dy/c3d0BAOvWrcPgwYPRqFEjDB06FABQpUoVue306NED1apVw6xZs3K94eT49ttvc32yDQ4OxoYNG2Bubv7BYxs8eDDWr1+PPn36oEmTJjhy5IiY37tiYmLQuHFj8U3OzMwMBw4cgLe3N5KSkvIsCnIcOHAAmZmZ6N+//wdzyXH16lU0b94cMpkMEyZMgLa2NlatWoVWrVrh2LFjuQa2jRw5EmXLloW/vz8ePHiARYsWwdfXF1u2bAHw9jyvXr0aZ8+exe+//w4AaNKkSaFyyTFs2DBs374dvr6+sLe3x4sXL3Dy5Elcv34d9evXz3MdQRDw9ddf4+jRo/D29oaDgwMOHjyI8ePH48mTJ7l6W06ePImdO3dixIgRMDIywpIlS9CtWzdERUWhXLlyCuWrqJcvX+Lly5eoWrWqXPuMGTOgo6ODcePGIS0tDTo6Ojhy5Ajc3Nzg6OgIf39/aGhoIDAwEG3atMGJEyfQqFEjAMDly5fRvn17mJmZYerUqcjMzIS/vz8sLCwKzOf169do3rw5rl+/jkGDBqF+/fp4/vw5/v77bzx+/BimpqbIyspCx44dERoait69e+O7777Dq1evEBISgitXruT6W8pR1M+v/Bw6dAjdunWDvb09AgIC8OLFC/HN6X3ffvstgoKC4OXlhVGjRuH+/ftYunQpLl68iH/++afAywNpaWnYsWMHxo4dC+DtBx4vLy9ER0fD0tJSjHv69CkaNWqEhIQEDB06FDVq1MCTJ0+wfft2vHnzBjo6OoU69yV5vHfu3EH37t3h7e0NT09P/PHHHxg4cCAcHR1Rq1YttGjRAqNGjcKSJUvwww8/oGbNmgAg/n/dunXw9PSEq6sr5syZgzdv3mDFihVo1qwZLl68KBb83bp1w9WrVzFy5EhUqlQJsbGxCAkJQVRUFC+FqIrwmQoMDBQACOfOnROWLl0qGBkZCW/evBEEQRB69OghtG7dWhAEQahYsaLg7u4ut25OXI709HShdu3aQps2beTaDQwMBE9Pz1z79vf3FwAI33zzTb7L8nP79m3B2NhYaNeunZCZmZlvXGRkpABAGDFihFx7nz59BACCv7+/2Obt7S1YWVkJz58/l4vt3bu3YGxsnOt43zVmzBgBgHDx4sV8Y97l4eEh6OjoCHfv3hXbnj59KhgZGQktWrQQ23J+Py4uLkJ2drbc/jQ1NYWEhASxzdPTUzAwMJDbz/379wUAQmBgYK4c3j9+Y2NjwcfH54N5e3p6ChUrVhR/3r17twBAmDlzplxc9+7dBYlEIty5c0dufzo6OnJt//77rwBA+PXXXz+4X0UBELy9vYW4uDghNjZWOHPmjNC2bVsBgDB//nxBEATh6NGjAgChcuXKcr/b7OxsoVq1aoKrq6vcOX/z5o1ga2srtGvXTmzz8PAQdHV1hYcPH4pt165dEzQ1NXM9fytWrCj3dzBlyhQBgLBz585c+efs948//hAACAsWLMg3Jud43/1dFsfzKy8ODg6ClZWVXNyhQ4cEAHLPkxMnTggAhA0bNsitHxwcnGd7XrZv3y4AEG7fvi0IgiAkJSUJurq6wsKFC+XiBgwYIGhoaAjnzp3LtY2cYyzMuc/rb6c4jrdixYoCAOH48eNiW2xsrCCVSoWxY8eKbdu2bRMACEePHpXb5qtXr4QyZcoIQ4YMkWuPjo4WjI2NxfaXL18KAIR58+blOmZSnc/+sgUA9OzZEykpKdi7dy9evXqFvXv35nvJAgD09PTEf798+RKJiYlo3ry5XDd3YQwbNkyh+OTkZHTp0gVly5bFpk2bPjglcP/+/QCAUaNGybW/34sgCAJ27NiBTp06QRAEPH/+XHy4uroiMTHxg8eV09VdmMFbWVlZOHToEDw8PFC5cmWx3crKCn369MHJkyfF7eUYOnSo3GWc5s2bIysrCw8fPixwf4VVpkwZnDlzBk+fPi30Ovv374empmau8zt27FgIgoADBw7Itbu4uMh9Wq5bty5kMhnu3bv3ccnnYc2aNTAzM4O5uTmcnJzErvn3f/eenp5yz+XIyEjcvn0bffr0wYsXL8TnQXJyMtq2bYvjx48jOzsbWVlZOHjwIDw8POQGI9asWROurq4F5rdjxw7Uq1cPXbp0ybUs53e9Y8cOmJqaYuTIkfnGvK+knl/Pnj1DZGQkPD09YWxsLLa3a9cO9vb2crHbtm2DsbEx2rVrJ/e35ejoCENDQxw9ejTf/eTYsGEDGjRoIPYc5XTNv3vpIjs7G7t370anTp3QoEGDXNt497wWdO5L8njt7e3RvHlz8WczMzPY2dkV6u8iJCQECQkJ+Oabb+T2pampCScnJ3FfOeOhwsLCFLpURMXrs79sAbx9wrq4uGDjxo148+YNsrKy0L1793zj9+7di5kzZyIyMhJpaWliu6L3Z7C1tVUofsiQIbh79y5OnTpVYFf3w4cPoaGhkat7187OTu7nuLg4JCQkYPXq1Vi9enWe24qNjc13PzKZDMDbcQMFiYuLw5s3b3LlALx948nOzsajR49Qq1Ytsf39kfJly5YFgCJ9EZg7dy48PT1Rvnx5ODo6okOHDhgwYIDcG9D7Hj58CGtr61xFU0536vtvPnmN+C9btmyBxxEdHS33s7Gxsdwbfl46d+4MX19fSCQSGBkZoVatWjAwMMgV9/7z7/bt2wDwwYF4iYmJSEtLQ0pKCqpVq5ZruZ2dnVi45ufu3bvo1q1bgTF2dnYKDR4uqedXzu82v+N/t9i+ffs2EhMT873E+KG/LeDt+IT9+/fD19cXd+7cEdubNm2KHTt24NatW6hevTri4uKQlJSE2rVrf3B7hTn37yvO41X27yJnXwDQpk2bPJfnvDZJpVLMmTMHY8eOhYWFBRo3boyOHTtiwIABcpd9qGSViuIBAPr06YMhQ4YgOjoabm5u+c4LP3HiBL7++mu0aNECy5cvh5WVFbS1tREYGIiNGzcqtM+C3gTetXjxYmzatAnr168v0psg5Uw/7NevX75vGnXr1s13/Ro1agB4ew28OG7OlF/vipDPGJEcH/p0+r6ePXuiefPm2LVrFw4dOoR58+Zhzpw52LlzZ5FNbVT2OKysrOR+DgwMLPCGSzY2NoWaAfL+8y/nuTBv3rx8f5eGhoZyBfPnTtnfS2FlZ2fD3Nw83wGOZmZmH1x/27ZtSEtLw/z58zF//vxcyzds2IBp06YVSa5FQdHj/Zjzn/N8XbduXZ5FwLuF5+jRo9GpUyfs3r0bBw8exE8//YSAgAAcOXIEX375ZYH7oqJXaoqHLl264Ntvv8Xp06c/OFhqx44d0NXVxcGDB+WmoAUGBuaKLao7RZ44cQLjxo3D6NGj0bdv30KtU7FiRWRnZ4uf4HLcvHlTLi5nJkZWVpZSUw7d3NygqamJ9evXFzho0szMDPr6+rlyAIAbN25AQ0MD5cuXVziHvOR8gkxISJBrz6872srKCiNGjMCIESMQGxuL+vXr4+eff863eKhYsSIOHz6ca779jRs3xOVF4d1ZQADkPjUXtZxeKplM9sHngpmZGfT09MRPfu/K63eb136uXLlSYMyZM2eQkZFR6PsNlNTzK+d3W5jjr1KlCg4fPoymTZsq9GEhx4YNG1C7dm34+/vnWrZq1Sps3LgR06ZNg5mZGWQyWaHOa0Ex7yvJ481Lfq+jOc9Xc3PzQr12ValSBWPHjsXYsWNx+/ZtODg4YP78+Vi/fn2R5EmKKRVjHoC3n6hWrFiBqVOnolOnTvnGaWpqQiKRyH2CffDgQZ53kjQwMMj15qWoZ8+eoWfPnmjWrBnmzZtX6PVy3vTeny2yaNEiuZ81NTXRrVs37NixI88XlYKmrZUvXx5DhgzBoUOH8Ouvv+Zanp2djfnz5+Px48fQ1NRE+/bt8ddff8lNkYqJiRFv1JXT1fixZDIZTE1Ncfz4cbn25cuXy/2clZWFxMREuTZzc3NYW1t/8BN2hw4dkJWVhaVLl8q1L1y4EBKJpMh6LFxcXOQe7/dEFCVHR0dUqVIFv/zyC16/fp1rec5zQVNTE66urti9ezeioqLE5devXy/Ud0h069YN//77b55T/XI+cXbr1g3Pnz/PdX7fjXlfST2/rKys4ODggLVr18o9d0JCQnDt2jW52J49eyIrKwszZszItZ3MzMwPvj48evQIx48fR8+ePdG9e/dcDy8vL9y5cwdnzpyBhoYGPDw8sGfPnjzv6PrueS3o3KvqePOTc8nt/XVdXV0hk8kwa9YsZGRk5Fov5/n65s0bpKamyi2rUqUKjIyMSlUv2uem1PQ8AB++1pvD3d0dCxYswFdffYU+ffogNjYWy5YtQ9WqVXHp0iW5WEdHRxw+fBgLFiyAtbU1bG1tFb7H/qhRoxAXF4cJEyZg8+bNcsvq1q2b7yUFBwcHfPPNN1i+fDkSExPRpEkThIaGyl03zTF79mwcPXoUTk5OGDJkCOzt7REfH48LFy7g8OHDiI+P/2CO8+fPx927dzFq1Cjs3LkTHTt2RNmyZREVFYVt27bhxo0b6N27NwBg5syZCAkJQbNmzTBixAhoaWlh1apVSEtLw9y5cxU6NwUZPHgwZs+ejcGDB6NBgwY4fvw4bt26JRfz6tUr2NjYoHv37qhXrx4MDQ1x+PBhnDt3Ls9u4hydOnVC69at8eOPP+LBgweoV68eDh06hL/++gujR4/Odyrhp0xDQwO///473NzcUKtWLXh5eeGLL77AkydPcPToUchkMuzZswcAMG3aNAQHB6N58+YYMWIEMjMz8euvv6JWrVq5/g7eN378eGzfvh09evTAoEGD4OjoiPj4ePz9999YuXIl6tWrhwEDBuDPP/+En58fzp49i+bNmyM5ORmHDx/GiBEj0Llz5zy3XVLPr4CAALi7u6NZs2YYNGgQ4uPjxeN/t/Bq2bIlvv32WwQEBCAyMhLt27eHtrY2bt++jW3btmHx4sX5jq/auHGjOCU4Lx06dICWlpb43R2zZs3CoUOH0LJlSwwdOhQ1a9bEs2fPsG3bNpw8eRJlypQp1LlX1fHmx8HBAZqampgzZw4SExMhlUrRpk0bmJubY8WKFejfvz/q16+P3r17w8zMDFFRUdi3bx+aNm2KpUuX4tatW2jbti169uwJe3t7aGlpYdeuXYiJiRFfl0gFVDPJ4+O9O1XzQ/KaqrlmzRqhWrVqglQqFWrUqCEEBgbmOcXyxo0bQosWLQQ9PT0BgDhdLSc2Li4u1/7e307Lli0FAHk+3p2ilpeUlBRh1KhRQrly5QQDAwOhU6dOwqNHj/JcNyYmRvDx8RHKly8vaGtrC5aWlkLbtm2F1atXf3AfOTIzM4Xff/9daN68uWBsbCxoa2sLFStWFLy8vHJN47xw4YLg6uoqGBoaCvr6+kLr1q2FU6dOycXk9/vJmWb47rStvKZqCsLbKYbe3t6CsbGxYGRkJPTs2VOIjY2VO/60tDRh/PjxQr169QQjIyPBwMBAqFevnrB8+XK5bb0/VVMQ3k4VGzNmjGBtbS1oa2sL1apVE+bNmyc39U8Q3k4nzGsq6PtTGItCfvt6V8453LZtW57LL168KHTt2lUoV66cIJVKhYoVKwo9e/YUQkND5eKOHTsmODo6Cjo6OkLlypWFlStX5vl3kNdxvnjxQvD19RW++OILQUdHR7CxsRE8PT3lpgu/efNG+PHHHwVbW1vxOdm9e3e5aZh5PZeL+vmVnx07dgg1a9YUpFKpYG9vL+zcuTPP54kgCMLq1asFR0dHQU9PTzAyMhLq1KkjTJgwQXj69Gm+269Tp45QoUKFD+bQqlUrwdzcXMjIyBAEQRAePnwoDBgwQDAzMxOkUqlQuXJlwcfHR0hLSxPXKejc5zfNuaiPN6/XVkF4+5rXsmVLubbffvtNqFy5sjgV+N3fz9GjRwVXV1fB2NhY0NXVFapUqSIMHDhQOH/+vCAIgvD8+XPBx8dHqFGjhmBgYCAYGxsLTk5OwtatWz94bql4SQShiEYWERERkVooNWMeiIiIqGSweCAiIiKFsHggIiIihbB4ICIiKkGzZ8+GRCKRu+V8amoqfHx8UK5cORgaGqJbt26IiYmRWy8qKgru7u7Q19eHubk5xo8fj8zMTLmYsLAw1K9fH1KpFFWrVs3zm4mXLVuGSpUqQVdXF05OTjh79qzCx8DigYiIqIScO3cOq1atyjVNf8yYMdizZw+2bduGY8eO4enTp+jatau4PCsrC+7u7khPT8epU6ewdu1aBAUFYcqUKWLM/fv34e7ujtatWyMyMhKjR4/G4MGD5e7fsmXLFvj5+cHf3x8XLlxAvXr14OrqWuCt1nNR9XQPIiIidfDq1SuhWrVqQkhIiNCyZUvhu+++EwRBEBISEgRtbW256dfXr18XAAjh4eGCIAjC/v37BQ0NDSE6OlqMWbFihSCTycSpvBMmTBBq1aolt89evXoJrq6u4s+NGjWSmw6elZUlWFtbCwEBAQodC3seiIiIlJCWloakpCS5x4fueunj4wN3d/dct+OOiIhARkaGXHuNGjVQoUIFhIeHAwDCw8NRp04dWFhYiDGurq5ISkrC1atXxZj3t+3q6ipuIz09HREREXIxGhoacHFxEWMKq1TdYTJHambBMURE9OnTLeZ3Kb0vfZVed2Jn01xfbObv74+pU6fmit28eTMuXLiAc+fO5VoWHR0NHR2dXF/oaGFhIX4zb3R0tFzhkLM8Z9mHYpKSkpCSkoKXL18iKysrz5ic7/UprFJZPBARERWKRPkO+EmTJsHPz0+u7d0vXMzx6NEjfPfddwgJCYGurq7S+/uU8LIFERGpL4lE6YdUKoVMJpN75FU8REREiN/2q6WlBS0tLRw7dgxLliyBlpYWLCwskJ6enuvLw2JiYsSvK7e0tMw1+yLn54JiZDIZ9PT0YGpqCk1NzTxj8vpa9A9h8UBEROpLoqH8o5Datm2Ly5cvIzIyUnw0aNAAffv2Ff+tra2N0NBQcZ2bN28iKioKzs7OAABnZ2dcvnxZblZESEgIZDIZ7O3txZh3t5ETk7MNHR0dODo6ysVkZ2cjNDRUjCksXrYgIiIqRkZGRqhdu7Zcm4GBAcqVKye2e3t7w8/PDyYmJpDJZBg5ciScnZ3RuHFjAED79u1hb2+P/v37Y+7cuYiOjsbkyZPh4+Mj9nYMGzYMS5cuxYQJEzBo0CAcOXIEW7duxb59+8T9+vn5wdPTEw0aNECjRo2waNEiJCcnw8vLS6FjYvFARETqSyJRdQYAgIULF0JDQwPdunVDWloaXF1dsXz5cnG5pqYm9u7di+HDh8PZ2RkGBgbw9PTE9OnTxRhbW1vs27cPY8aMweLFi2FjY4Pff/8drq6uYkyvXr0QFxeHKVOmIDo6Gg4ODggODs41iLIgpfJbNTnbgoiodCj22RaNxim9bsrZX4owk88Lex6IiEh9fSI9D58bFg9ERKS+PmKqpjpj8UBEROqLPQ9KYclFRERECmHPAxERqS9etlAKiwciIlJfvGyhFBYPRESkvtjzoBQWD0REpL7Y86AUFg9ERKS+2POgFJ41IiIiUgh7HoiISH2x50EpLB6IiEh9aXDMgzJYPBARkfpiz4NSWDwQEZH64mwLpbB4ICIi9cWeB6XwrBEREZFC2PNARETqi5ctlMLigYiI1BcvWyiFxQMREakv9jwohcUDERGpL/Y8KIXFAxERqS/2PCiFJRcREREphD0PRESkvnjZQiksHoiISH3xsoVSWDwQEZH6Ys+DUlg8EBGR+mLxoBSetU/E5o0b4NauDRp+WQd9e/fA5UuXVJ1SqbXmt9WoV8sOcwN+zrVMEASM+HYw6tWyw5HQwyrIrnRY89sq9OnZDc4Nv0Sr5s4YPXIEHty/JxezfesWeA/sjyaN6qNeLTskJSWpKNvSja8tBZBIlH+oMRYPn4DgA/vxy9wAfDvCB5u37YKdXQ0M/9YbL168UHVqpc6Vy5ewfdtmVK9ul+fy9X+uhUTNXxSKwvlzZ9Hrm75Yt2krVv0WiMzMTAwb4o03b96IMampKWjStDm8hwxTYaalG19bPh0rVqxA3bp1IZPJIJPJ4OzsjAMHDojLW7VqBYlEIvcYNkz+byMqKgru7u7Q19eHubk5xo8fj8zMTLmYsLAw1K9fH1KpFFWrVkVQUFCuXJYtW4ZKlSpBV1cXTk5OOHv2rMLHw+LhE7BubSC6du8Jjy7dUKVqVUz2nwZdXV3s3rlD1amVKm+SkzFp4nj4T5sJmbFxruU3rl/Hn2v/wLQZs1SQXemyYvUadO7SFVWrVoNdjRqY/vNsPHv2FNevXRVj+g0YCO8hQ1G3Xj0VZlq68bWlECQayj8UYGNjg9mzZyMiIgLnz59HmzZt0LlzZ1y9+t/fxJAhQ/Ds2TPxMXfuXHFZVlYW3N3dkZ6ejlOnTmHt2rUICgrClClTxJj79+/D3d0drVu3RmRkJEaPHo3Bgwfj4MGDYsyWLVvg5+cHf39/XLhwAfXq1YOrqytiY2MVOh6VFg/Pnz/H3Llz0aVLFzg7O8PZ2RldunTBvHnzEBcXp8rUSkxGejquX7uKxs5NxDYNDQ00btwEl/69qMLMSp9ZM6ejRYuWcuc6R0pKCiZNGIsfJk+BqZmZCrIr3V6/egUAeRZtVDz42lJIJXTZolOnTujQoQOqVauG6tWr4+eff4ahoSFOnz4txujr68PS0lJ8yGQycdmhQ4dw7do1rF+/Hg4ODnBzc8OMGTOwbNkypKenAwBWrlwJW1tbzJ8/HzVr1oSvry+6d++OhQsXittZsGABhgwZAi8vL9jb22PlypXQ19fHH3/8odDxqKx4OHfuHKpXr44lS5bA2NgYLVq0QIsWLWBsbIwlS5agRo0aOH/+fIHbSUtLQ1JSktwjLS2tBI6gaLxMeImsrCyUK1dOrr1cuXJ4/vy5irIqfQ7s34fr169h1JixeS6fNycA9b78Eq3buJRwZqVfdnY25s6ZBYcv66NateqqTkdt8LWlkD6i50HZ95+srCxs3rwZycnJcHZ2Fts3bNgAU1NT1K5dG5MmTZK7zBceHo46derAwsJCbHN1dUVSUpLYexEeHg4XF/nXMFdXV4SHhwMA0tPTERERIRejoaEBFxcXMaawVDbbYuTIkejRowdWrlyZ6xqzIAgYNmwYRo4cWeABBQQEYNq0aXJtP/7kj8lTphZ1yvSZin72DHNn/4xVv/0BqVSaa3nYkVCcO3MaW7bvUkF2pd+smdNw9/ZtBK3bqOpUiHL7iDFOeb3/+Pv7Y+rUqXnGX758Gc7OzkhNTYWhoSF27doFe3t7AECfPn1QsWJFWFtb49KlS5g4cSJu3ryJnTt3AgCio6PlCgcA4s/R0dEfjElKSkJKSgpevnxbUOYVc+PGDYWOXWXFw7///ougoKA8B6dJJBKMGTMGX375ZYHbmTRpEvz8/OTaBM3cbxCfqrJlykJTUzPXAKYXL17A1NRURVmVLteuXUX8ixfo3aOr2JaVlYWI8+ewedMG9Oj1DR49ikIz54Zy640dPRL1HRtgTdC6kk651Jg1czqOHwvDH2vXw8LSUtXpqBW+thTOxwyQzuv9J68PKDns7OwQGRmJxMREbN++HZ6enjh27Bjs7e0xdOhQMa5OnTqwsrJC27ZtcffuXVSpUkXpHIuLyooHS0tLnD17FjVq1Mhz+dmzZ3NVR3mRSqW5flmpmfkEf4K0dXRQ074WzpwOR5u2b7uSsrOzceZMOHp/00/F2ZUOTo0bY/vuPXJt/j9OQqXKleHlPQRly5RF95695JZ39+iEcRMnoWWr1iWZaqkhCAICfp6BI6EhWBO0DjY25VWdktrha0vxy+v950N0dHRQtWpVAICjoyPOnTuHxYsXY9WqVblinZycAAB37txBlSpVxPfMd8XExAB4+36a8/+ctndjZDIZ9PT0oKmpCU1NzTxjLBUs7lVWPIwbNw5Dhw5FREQE2rZtKxYKMTExCA0NxW+//YZffvlFVemVqP6eXvjph4moVas2atepi/Xr1iIlJQUeXboWvDIVyMDAMNe1dj19fZQxLiO25zVI0srKmm96Spo1YxoO7N+LRb8uh4G+AZ7/fwC0oZERdHV1AQDP4+Lw/PlzPIqKAgDcuX0L+voGsLKygnGZMqpKvVTha0vBVDk1Ozs7O98xEpGRkQAAKysrAICzszN+/vlnxMbGwtzcHAAQEhICmUwmXvpwdnbG/v375bYTEhIijqvQ0dGBo6MjQkND4eHhIeYQGhoKX19fhXJXWfHg4+MDU1NTLFy4EMuXL0dWVhYAQFNTE46OjggKCkLPnj1VlV6J+sqtA17Gx2P50iV4/jwOdjVqYvmq31GOXYv0mdq6ZRMAwHtgf7n26TMD0Pn/b1zbtm7GyuVLxWVeA/rmiqGPw9eWQiih2mHSpElwc3NDhQoV8OrVK2zcuBFhYWE4ePAg7t69i40bN6JDhw4oV64cLl26hDFjxqBFixaoW7cuAKB9+/awt7dH//79MXfuXERHR2Py5Mnw8fERez+GDRuGpUuXYsKECRg0aBCOHDmCrVu3Yt++fWIefn5+8PT0RIMGDdCoUSMsWrQIycnJ8PLyUuh4JIIgCEV3epSTkZEhjv41NTWFtrb2R23vc7psQURE+dMt5o+4hj2DlF739daBhY719vZGaGgonj17BmNjY9StWxcTJ05Eu3bt8OjRI/Tr1w9XrlxBcnIyypcvjy5dumDy5Mly0zUfPnyI4cOHIywsDAYGBvD09MTs2bOhpfXfSQoLC8OYMWNw7do12NjY4KeffsLAgfJ5Ll26FPPmzUN0dDQcHBywZMkS8TJJYX0SxUNRY/FARFQ6FHfxYNRrrdLrvtriWYSZfF74xVhERKS2eDt65fD21ERERKQQ9jwQEZHaYs+Dclg8EBGR+mLtoBQWD0REpLbY86AcFg9ERKS2WDwoh8UDERGpLRYPyuFsCyIiIlIIex6IiEhtsedBOSweiIhIfbF2UAqLByIiUlvseVAOiwciIlJbLB6Uw+KBiIjUFosH5XC2BRERESmEPQ9ERKS+2PGgFBYPRESktnjZQjksHoiISG2xeFAOiwciIlJbLB6Uw+KBiIjUFosH5XC2BRERESmEPQ9ERKS+2PGgFBYPRESktnjZQjksHoiISG2xeFAOiwciIlJbLB6UwwGTREREpBD2PBARkfpix4NSWDwQEZHa4mUL5bB4ICIitcXiQTkc80BERGpLIpEo/VDEihUrULduXchkMshkMjg7O+PAgQPi8tTUVPj4+KBcuXIwNDREt27dEBMTI7eNqKgouLu7Q19fH+bm5hg/fjwyMzPlYsLCwlC/fn1IpVJUrVoVQUFBuXJZtmwZKlWqBF1dXTg5OeHs2bMKHQvA4oGIiNRYSRUPNjY2mD17NiIiInD+/Hm0adMGnTt3xtWrVwEAY8aMwZ49e7Bt2zYcO3YMT58+RdeuXcX1s7Ky4O7ujvT0dJw6dQpr165FUFAQpkyZIsbcv38f7u7uaN26NSIjIzF69GgMHjwYBw8eFGO2bNkCPz8/+Pv748KFC6hXrx5cXV0RGxur2HkTBEFQaI3PQGpmwTFERPTp0y3mi+u2o/cpve79Re4ftW8TExPMmzcP3bt3h5mZGTZu3Iju3bsDAG7cuIGaNWsiPDwcjRs3xoEDB9CxY0c8ffoUFhYWAICVK1di4sSJiIuLg46ODiZOnIh9+/bhypUr4j569+6NhIQEBAcHAwCcnJzQsGFDLF26FACQnZ2N8uXLY+TIkfj+++8LnTt7HoiISH1JlH+kpaUhKSlJ7pGWllbgLrOysrB582YkJyfD2dkZERERyMjIgIuLixhTo0YNVKhQAeHh4QCA8PBw1KlTRywcAMDV1RVJSUli70V4eLjcNnJicraRnp6OiIgIuRgNDQ24uLiIMYXFAZNUJMo29FV1Cmpn/+Zpqk5B7ThXKafqFKiIfcyAyYCAAEybJv936O/vj6lTp+YZf/nyZTg7OyM1NRWGhobYtWsX7O3tERkZCR0dHZQpU0Yu3sLCAtHR0QCA6OhoucIhZ3nOsg/FJCUlISUlBS9fvkRWVlaeMTdu3FDo2Fk8EBGR2vqY4mHSpEnw8/OTa5NKpfnG29nZITIyEomJidi+fTs8PT1x7NgxpfevSiweiIhIbX3MTE2pVPrBYuF9Ojo6qFq1KgDA0dER586dw+LFi9GrVy+kp6cjISFBrvchJiYGlpaWAABLS8tcsyJyZmO8G/P+DI2YmBjIZDLo6elBU1MTmpqaecbkbKOwOOaBiIjUVknNtshLdnY20tLS4OjoCG1tbYSGhorLbt68iaioKDg7OwMAnJ2dcfnyZblZESEhIZDJZLC3txdj3t1GTkzONnR0dODo6CgXk52djdDQUDGmsNjzQEREVMwmTZoENzc3VKhQAa9evcLGjRsRFhaGgwcPwtjYGN7e3vDz84OJiQlkMhlGjhwJZ2dnNG7cGADQvn172Nvbo3///pg7dy6io6MxefJk+Pj4iL0fw4YNw9KlSzFhwgQMGjQIR44cwdatW7Fv338zSvz8/ODp6YkGDRqgUaNGWLRoEZKTk+Hl5aXQ8bB4ICIitVVSN5iMjY3FgAED8OzZMxgbG6Nu3bo4ePAg2rVrBwBYuHAhNDQ00K1bN6SlpcHV1RXLly8X19fU1MTevXsxfPhwODs7w8DAAJ6enpg+fboYY2tri3379mHMmDFYvHgxbGxs8Pvvv8PV1VWM6dWrF+Li4jBlyhRER0fDwcEBwcHBuQZRFoT3eaAiwdkWJY+zLUoeZ1uUvOK+z4PdxIMFB+Xj5hzXgoNKKfY8EBGR2uJXWyiHxQMREaktDQ1WD8pg8UBERGqLPQ/K4VRNIiIiUgh7HoiISG0Vxf0a1BGLByIiUlusHZTD4oGIiNQWex6Uw+KBiIjUFosH5bB4ICIitcXaQTmcbUFEREQKYc8DERGpLV62UA6LByIiUlusHZTD4oGIiNQWex6Uw+KBiIjUFmsH5bB4ICIitcWeB+VwtgUREREphD0PRESkttjxoBwWD0REpLZ42UI5LB6IiEhtsXZQDosHIiJSW+x5UA6LByIiUlusHZTD2RZERESkEPY8EBGR2uJlC+WweCAiIrXF2kE5LB6IiEhtsedBOSweiIhIbbF4UA6Lh0/Mmt9WY8mi+ejbbwAmTPpR1el80sZ5tcOMUZ2xdMNRjP9lBwBAqqOF2X5d0cPVEVIdLRwOv47vZm1BbPwrcb3ylmWx+IdeaNmgOl6npGHDnjP46de/kZWVDQCwNJVhtl9X1LevgCrlTbF80zFx+zm0tDQwflB79OvoBGvzMrj1MAaTF/+FkFPXS+4ElJDbVy7i0K6NiLp7E4nxzzHshwA4NG4pLhcEAXs2/o6Th/5GSvIrVKlZF98MHw8L6/JiTNTdm9gZtBwP71yHhoYGvnRuhe7eo6Crpy/GDPu6Sa59e4+bhoYt2gEALp4Kw7EDu/D4/m1kZqTDqoItOn7jjVr1Gxfj0ZcefG3JG2sH5XC2xSfkyuVL2L5tM6pXt1N1Kp88R/sK8O7WFJduPZZrnzuuG9xb1EbfCWvQfvAiWJkZY/P8weJyDQ0Jdi4ZDh1tLbQeOB9DpqxDv6+dMGW4uxijo62F5y9fYfbvwbh060me+586ohMGd2sGv7nb8GW3mfh9+0lsmT8E9exsiueAVSgtLRU2tlXR+9uxeS4/tHM9ju7dhj7Dx2PivN+hI9XFr/5jkJGeBgBIeBGHRT+NgrmVDSbO+w0jpy7A06j7WLt4Zq5tDfjuR8xZu0d8ODRuIS67fTUSNR0awtf/F0xaGAi7Oo5YPnMCou7eLJ4DL0X42qJ6AQEBaNiwIYyMjGBubg4PDw/cvCn/3G3VqhUkEoncY9iwYXIxUVFRcHd3h76+PszNzTF+/HhkZmbKxYSFhaF+/fqQSqWoWrUqgoKCcuWzbNkyVKpUCbq6unBycsLZs2cVOh4WD5+IN8nJmDRxPPynzYTM2FjV6XzSDPR0EDhrIEbM2ISEpBSxXWaoi4Eezpi4YCeOnbuFi9cfYaj/ejg7VEGjOpUAAC7ONVGzsiUG/bgWl249waF/rmH68n34tmcLaGtpAgCinsVj3Lwd2Lj3LJJep+aZQ5+OjTB3zSEcPHkND568wG/bTuLgP9fwXf82xX78Ja22ozM69/sWXzq3zLVMEASE/r0Vbj0HwqFxC9jYVoXXmClIiH+OyNPHAQCXz/0DTU0t9B42FpY2FVGpmj36jpiAi6fCEPtUvvjTNzCEcdly4kNbRyou6zlkNFy79UOlavawsC4PjwHDYG5VHpfP/VO8J+Azx9eWD3v/zVqRhyKOHTsGHx8fnD59GiEhIcjIyED79u2RnJwsFzdkyBA8e/ZMfMydO1dclpWVBXd3d6Snp+PUqVNYu3YtgoKCMGXKFDHm/v37cHd3R+vWrREZGYnRo0dj8ODBOHjwoBizZcsW+Pn5wd/fHxcuXEC9evXg6uqK2NjYQh8Pi4dPxKyZ09GiRUs0ds7ddUvyFk3qheATV3D0jHzV/mXNCtDR1sKR0/+133oQg6hn8XCqawsAcKpriyt3nspdxgg5dR3GRnqwr2JV6Bx0tLWQmp4h15aSmo4mX1ZR5pA+W89jniLp5QvUrNdAbNMzMIRtdXvcu3kFAJCZmQEtbW1oaPz3cpNTFNy5/q/c9jatnI+xfd0QMNYb/4TshSAI+e47OzsbqSlvoG8oK8pDKnX42vJhEonyD0UEBwdj4MCBqFWrFurVq4egoCBERUUhIiJCLk5fXx+WlpbiQyb77/l96NAhXLt2DevXr4eDgwPc3NwwY8YMLFu2DOnp6QCAlStXwtbWFvPnz0fNmjXh6+uL7t27Y+HCheJ2FixYgCFDhsDLywv29vZYuXIl9PX18ccffxT6eD7p4uHRo0cYNGjQB2PS0tKQlJQk90hLSyuhDIvGgf37cP36NYwak3e3MP2nh6sjHGqUx0+//p1rmWU5GdLSM5D4OkWuPfZFEizKvf0DtCgnQ+yLV/LL45PeLjMt/JvQ4fDrGNWvDapUMINEIkEbpxro3MYBlgpsozRIehkPAJCVMZFrNypjIi6zq+uIxJcvcGjnBmRmZCD5dRJ2/bn87frxL8R1OvUZgiETZuK76YtQv0krbFr5C47u3ZbvvkN2bURa6hs4Nit9vT1Fha8tBfuYnoePef9JTEwEAJiYyP/tbNiwAaampqhduzYmTZqEN2/eiMvCw8NRp04dWFhYiG2urq5ISkrC1atXxRgXFxe5bbq6uiI8PBwAkJ6ejoiICLkYDQ0NuLi4iDGF8UkXD/Hx8Vi7du0HYwICAmBsbCz3mDcnoIQy/HjRz55h7uyfETBnHqRSacErqDEbizKYN74bvH4MQlp6ZsErFKNx87bjblQs/t35E5LOLsLC73vgz79PIzs7/0/K6sq6QmUMHP0TDu/ehFE92mDigE4wtbCGrIwJJBr/fXxz7+2FqvZ1UaGKHVy79Uf7rn0Rsmtjnts8e+wQ9m3+A0MmzMxVuNBbfG0pnI/pecjr/ScgoOD3n+zsbIwePRpNmzZF7dq1xfY+ffpg/fr1OHr0KCZNmoR169ahX79+4vLo6Gi5wgGA+HN0dPQHY5KSkpCSkoLnz58jKysrz5icbRSGSmdb/P137k+P77p3716B25g0aRL8/Pzk2gTNz+cP5dq1q4h/8QK9e3QV27KyshBx/hw2b9qAcxcvQ1NTU4UZfjq+rFkBFuVkCN84UWzT0tJEs/pVMKxXC3TyWQapjjaMDfXkeh/My8kQ8+Jt70LMiyQ0qF1RbrvmJm97C2KeJxU6l+cvX6On32+Q6mihnLEBnsYlYuaozrj/5EXBK5cisrJv37iTEuJhbGIqtr9KiIdN5Wriz41atkejlu2R9DIeOrq6kEgkOPzXZphafJHvtm2r22P/lkBkZKRDW1tHbD93PATrfg3A0IkzUdOhYTEcVenA15bC0fiI6RZ5vf8UplDz8fHBlStXcPLkSbn2oUOHiv+uU6cOrKys0LZtW9y9exdVqnxal0RVWjx4eHhAIpF88LpmQYNSpFJprl9Wqmo/lCrEqXFjbN+9R67N/8dJqFS5Mry8h/CP+x1Hz96EY/ef5dpWT+uHm/djMD8oBI9jXiI9IxOtneywOzQSAFCtojkqWJngzKX7AIAzl+5jorcrzMoaIu7lawBA28Y1kPgqBdfvFb7qzpGWnomncYnQ0tKAR1sH7Ai58HEH+ZkxtbCGrGw53Pj3PMpXrg4ASHmTjPu3rqGFW5dc8TnFxj8he6GtrfPBN/9H929D39BIvnA4dgh//joL3uOmo07DpkV8NKULX1uKX17vPwXx9fXF3r17cfz4cdjYfHh2lpOTEwDgzp07qFKlCiwtLXPNioiJiQEAWFpaiv/PaXs3RiaTQU9PD5qamtDU1MwzJmcbhaHS4sHKygrLly9H586d81weGRkJR0fHEs6qZBkYGKJatepybXr6+ihjXCZXu7p7/SYN1+4+k2tLTklHfGKy2B60OxxzxnZFfGIyXiWnYsHEHjj97z2cvfwAwNuxCtfvRWPNTE/8uHg3LMrJ4O/TEau2Hkd6xn9VZ93qbz8RG+hLYVrWEHWrf4H0zCzc+H+B0bB2RVibl8G/Nx/jC/My+PHbDtDQkGBB0OESOBMlKzXlDeKe/Tcr4nnMMzy6dwsGRjKYmFmi7dc9cWDrWphbl4ephTX+3rAaZUxM5aZZHt27HVVq1oFUVw/XI89hR+BSdPEcDn1DIwDApbMnkZQQD1u7WtDWluJ65FkEb/sT7br0Ebdx9tghBC2agZ5DRsPWrhYSX77t5dHRkULPwLCEzsbng68thVNS93kQBAEjR47Erl27EBYWBltb2wLXiYyMBPD2vRIAnJ2d8fPPPyM2Nhbm5uYAgJCQEMhkMtjb24sx+/fvl9tOSEgInJ2dAQA6OjpwdHREaGgoPDw8ALy9jBIaGgpfX99CH49KiwdHR0dERETkWzwU1CtB9L4Jv+xAdraATb8MfnuTqFPX8V3AFnF5draAbt+twOIfeiMsaCySU9OwYc9ZTF+xT247Z7ZMEv/taF8BvTs0xMOnL1DD3R8AIJVqw9+nI2y/MMXrN2k4+M9VeP/0Z67BmqXBwzs3sPDH/15Utq9ZAgBo3KYDBo6ejPZd+yEtNRUbls3Bm+TXqGpfFyOnLpCbZvng9jXs3fQ70lJSYGFTEX19JqBxazdxuaamFo7t24Fta5YAggAzKxt09x6FZu2/FmNOHPwL2VlZ2LxyPjavnC+25+RBpIySusOkj48PNm7ciL/++gtGRkbi+AJjY2Po6enh7t272LhxIzp06IBy5crh0qVLGDNmDFq0aIG6desCANq3bw97e3v0798fc+fORXR0NCZPngwfHx+xB2TYsGFYunQpJkyYgEGDBuHIkSPYunUr9u377zXOz88Pnp6eaNCgARo1aoRFixYhOTkZXl5ehT4eiaDCd+cTJ04gOTkZX331VZ7Lk5OTcf78ebRsmXt++Yd8TpctSouyDQtfsVLR2L95mqpTUDvOVcqpOgW1o1vMH3HdVpxRet0Dw50KHZtfkRIYGIiBAwfi0aNH6NevH65cuYLk5GSUL18eXbp0weTJk+Wmaz58+BDDhw9HWFgYDAwM4OnpidmzZ0NL678TFRYWhjFjxuDatWuwsbHBTz/9hIEDB8rtd+nSpZg3bx6io6Ph4OCAJUuWiJdJCnU8qiweiguLh5LH4qHksXgoeSweSl5xFw8dVip2Z8V37R/WqAgz+bzwuy2IiEht8bstlPNJ3+eBiIiIPj3seSAiIrUlAbselMHigYiI1JYGawelsHggIiK1VVJTNUsbFg9ERKS2WDsoh8UDERGprY/5bgt1xtkWREREpBD2PBARkdpix4NyWDwQEZHa4oBJ5bB4ICIitcXaQTksHoiISG1xwKRyWDwQEZHaYumgHM62ICIiIoWw54GIiNQWB0wqh8UDERGpLX63hXJYPBARkdpiz4NyWDwQEZHaYu2gHBYPRESkttjzoBzOtiAiIiKFsOeBiIjUFgdMKqfQxUPXrl0LvdGdO3cqlQwREVFJ4mUL5RS6eDA2Ni7OPIiIiEocSwflFLp4CAwMLM48iIiIShy/20I5HDBJREREClF6wOT27duxdetWREVFIT09XW7ZhQsXPjoxIiKi4saOB+Uo1fOwZMkSeHl5wcLCAhcvXkSjRo1Qrlw53Lt3D25ubkWdIxERUbGQSCRKP9SZUsXD8uXLsXr1avz666/Q0dHBhAkTEBISglGjRiExMbGocyQiIioWEonyD3WmVPEQFRWFJk2aAAD09PTw6tUrAED//v2xadOmosuOiIioGGlIJEo/FBEQEICGDRvCyMgI5ubm8PDwwM2bN+ViUlNT4ePjg3LlysHQ0BDdunVDTEyMXExUVBTc3d2hr68Pc3NzjB8/HpmZmXIxYWFhqF+/PqRSKapWrYqgoKBc+SxbtgyVKlWCrq4unJyccPbsWYWOR6niwdLSEvHx8QCAChUq4PTp0wCA+/fvQxAEZTZJRERU4kqq5+HYsWPw8fHB6dOnERISgoyMDLRv3x7JyclizJgxY7Bnzx5s27YNx44dw9OnT+XusZSVlQV3d3ekp6fj1KlTWLt2LYKCgjBlyhQx5v79+3B3d0fr1q0RGRmJ0aNHY/DgwTh48KAYs2XLFvj5+cHf3x8XLlxAvXr14OrqitjY2MKfN0GJd/vBgwejfPny8Pf3x7JlyzB+/Hg0bdoU58+fR9euXbFmzRpFN1mkUjMLjqGiVbahr6pTUDv7N09TdQpqx7lKOVWnoHZ0i/k+yCN2XlN63eVd7ZVeNy4uDubm5jh27BhatGiBxMREmJmZYePGjejevTsA4MaNG6hZsybCw8PRuHFjHDhwAB07dsTTp09hYWEBAFi5ciUmTpyIuLg46OjoYOLEidi3bx+uXLki7qt3795ISEhAcHAwAMDJyQkNGzbE0qVLAQDZ2dkoX748Ro4cie+//75Q+SvV87B69Wr8+OOPAAAfHx/88ccfqFmzJqZPn44VK1Yos0kiIqIS9zEDJtPS0pCUlCT3SEtLK9R+c8YHmpiYAAAiIiKQkZEBFxcXMaZGjRqoUKECwsPDAQDh4eGoU6eOWDgAgKurK5KSknD16lUx5t1t5MTkbCM9PR0RERFyMRoaGnBxcRFjCkOpmk5DQwMaGv/VHb1790bv3r2V2RSVEmN+HqXqFNROZjYvERJ9rI+52VFAQACmTZPvAfT398fUqVM/uF52djZGjx6Npk2bonbt2gCA6Oho6OjooEyZMnKxFhYWiI6OFmPeLRxylucs+1BMUlISUlJS8PLlS2RlZeUZc+PGjYIP+v+UPm8nTpxAv3794OzsjCdPngAA1q1bh5MnTyq7SSIiohL1MT0PkyZNQmJiotxj0qRJBe7Tx8cHV65cwebNm0vgCIuHUsXDjh074OrqCj09PVy8eFHspklMTMSsWbOKNEEiIqLioiFR/iGVSiGTyeQeUqn0g/vz9fXF3r17cfToUdjY2IjtlpaWSE9PR0JCglx8TEwMLC0txZj3Z1/k/FxQjEwmg56eHkxNTaGpqZlnTM42CnXeCh35jpkzZ2LlypX47bffoK2tLbY3bdqUd5ckIqLPxscUD4oQBAG+vr7YtWsXjhw5AltbW7nljo6O0NbWRmhoqNh28+ZNREVFwdnZGQDg7OyMy5cvy82KCAkJgUwmg729vRjz7jZyYnK2oaOjA0dHR7mY7OxshIaGijGFodSYh5s3b6JFixa52o2NjXNVTUREROrOx8cHGzduxF9//QUjIyNxjIKxsTH09PRgbGwMb29v+Pn5wcTEBDKZDCNHjoSzszMaN24MAGjfvj3s7e3Rv39/zJ07F9HR0Zg8eTJ8fHzEHo9hw4Zh6dKlmDBhAgYNGoQjR45g69at2Ldvn5iLn58fPD090aBBAzRq1AiLFi1CcnIyvLy8Cn08ShUPlpaWuHPnDipVqiTXfvLkSVSuXFmZTRIREZW4krrNdM5MxFatWsm1BwYGYuDAgQCAhQsXQkNDA926dUNaWhpcXV2xfPlyMVZTUxN79+7F8OHD4ezsDAMDA3h6emL69OlijK2tLfbt24cxY8Zg8eLFsLGxwe+//w5XV1cxplevXoiLi8OUKVMQHR0NBwcHBAcH5xpE+SFK3echICAA69evxx9//IF27dph//79ePjwIUaPHo0pU6Zg5MiRim6ySPE+DyVv+qFbqk5B7bS2NVF1CmqneTVTVaegdor7Pg/j994sOCgf8zraFWEmnxelfi3ff/89srOz0bZtW7x58wYtWrSAVCrF+PHjMXjw4KLOkYiIqFio+3dUKEupAZMSiQQ//vgj4uPjceXKFZw+fRpxcXEwNjbONQiEiIjoU1VS321R2ihUPKSlpWHSpElo0KABmjZtiv3798Pe3h5Xr16FnZ0dFi9ejDFjxhRXrkREREVK4yMe6kyhyxZTpkzBqlWr4OLiglOnTqFHjx7w8vLC6dOnMX/+fPTo0QOamprFlSsRERF9AhQqHrZt24Y///wTX3/9Na5cuYK6desiMzMT//77b4mNWCUiIioqfOtSjkLFw+PHj+Ho6AgAqF27NqRSKcaMGcPCgYiIPkvqPnZBWQoVD1lZWdDR0flvZS0tGBoaFnlSREREJYG1g3IUKh4EQcDAgQPFO1mlpqZi2LBhMDAwkIvbuXNn0WVIRERUTBS9zTS9pVDx4OnpKfdzv379ijQZIiKiksTLFspRqHgIDAwsrjyIiIjoM1HMN/4kIiL6dLHjQTksHoiISG1xzINyWDwQEZHakoDVgzJYPBARkdpiz4NyWDwQEZHaYvGgHHX/bg8iIiJSEHseiIhIbfHrFZTD4oGIiNQWL1soh8UDERGpLXY8KIfFAxERqS3enlo5LB6IiEht8bKFcjjbgoiIiBTCngciIlJbvGqhHBYPRESktjR4e2qlsHggIiK1xZ4H5bB4ICIitcUBk8ph8fAJiImJwaIF8/DPiRNITU1B+QoVMX3mLNSqXUfVqX1y4u5ewa0jO5Hw+C5Sk+LReNAP+KKOs7g8My0Fl/euxbPLp5H25hUMTCxQtXknVG7qBgBIjo9B8IzBeW7byXMibByaIS05CefWz0fi0wdIT06C1KgMrGo7obb7AGjr6gMAnlw6hXv/HEDCk3vIzsyAzLICan7VB5Y16hf/SShhd65G4vCujYi6ewNJL19gyPcBqNe4hbg8MjwMJ4N3I+reTbx5lYTvFwTCpnJ1uW0s+tEXd65elGtr6toZ3wyfIP4cHxeNLSt/wa3LFyDV04NTazd83X8YNDXfvkytWzwTZ44eyJWfZflKmPzrhqI85FJhxbJfsXL5Urm2Sra2+GtvsIoy+jRxqqZyWDyoWFJiIgb2+wYNGjlh2crfUNakLKIePoRMZqzq1D5JWempKPOFLSo5tcPpwFm5lv+7ew3i7lxCw35joW9ijpgbFxG5YwV0jU1gXdsJ+mVM4T7tT7l17ocH49bRXbCs6QgAkEg0YFXbCbXc+kHH0BjJz5/h4o4VuPjmFRr1Hw8AeH73KsyrO6CWe39o6xni4dnDOPX7DLQZ/QvK2FQp/hNRgtJSU/CFbVU4u7jjt9k/5FqenpqKKvZ1Ub9ZG2xcNiff7TRp9zU69vmvcNOW6or/zs7KwooZ4yEra4Kxs1ci8eULrFs8E5qaWvi6/zAAQPfBo9F5wHBxnaysLASM8cSXTdoUxWGWSlWqVsPq3wPFnzW1NFWYjXo7fvw45s2bh4iICDx79gy7du2Ch4eHuHzgwIFYu3at3Dqurq4IDv6v2IuPj8fIkSOxZ88eaGhooFu3bli8eDEMDQ3FmEuXLsHHxwfnzp2DmZkZRo4ciQkTJshtd9u2bfjpp5/w4MEDVKtWDXPmzEGHDh0UOh4WDyr2x5rfYGFpiRk/B4htNjblVZjRp82yZgNY1myQ7/L4B9dRsWEbmFV922tTuclXuB8ejJdRt2Bd2wkSDU3oysrKrfPk8mnYODSDllQPAKCjb4gqTf/7QzIwMUeVph1w6+gusa1elyFy26jtPgBPL5/Gs6tnS13xUMvRGbUcnfNd3qj1VwCAFzHPPrgdHakUsrLl8lx2PfIsoh8/wMjpiyErYwIbAO59BuOvP1egQ29vaGlrQ8/AEHoG/71I/nv6OFJev4JzW3fFD0pNaGlqwtTMTNVpfNJKquMhOTkZ9erVw6BBg9C1a9c8Y7766isEBv5X7EmlUrnlffv2xbNnzxASEoKMjAx4eXlh6NCh2LhxIwAgKSkJ7du3h4uLC1auXInLly9j0KBBKFOmDIYOHQoAOHXqFL755hsEBASgY8eO2LhxIzw8PHDhwgXUrl270MfD4kHFjh09giZNm2HcmFE4f/4czM0t0Kt3H3Tr0VPVqX2WTCrVxLMrZ1CpUTvoGpsg7s5lvI57CnOPvC9VvHx0B4lP7uHLbsPy3WZK4gs8uRQO0yr5/2EJ2dnITEuBtr7RRx9DaXX+eAjOHTsEWVkT1G7YFG49vaDz/96H+zevwLpCZcjKmIjxNb90wpaVv+DZo/so/95lEAAIP7wXdnUbwMTcssSO4XPzMOohXFo1g45Uinr1HDBq9FhYWVurOq1PSkldtnBzc4Obm9sHY6RSKSwt834+X79+HcHBwTh37hwaNHj7AerXX39Fhw4d8Msvv8Da2hobNmxAeno6/vjjD+jo6KBWrVqIjIzEggULxOJh8eLF+OqrrzB+/Nte1BkzZiAkJARLly7FypUrC308Ki8eUlJSEBERARMTE9jb28stS01NxdatWzFgwIB8109LS0NaWppcm6ApzVWxfaoeP36ErVs2ob+nF7yHDsPVy5cxJ2AmtLW18bVHF1Wn99lx6PYtLmxZiv3TBkKioQmJRIL6vUbCLJ83/gdnDsHIojzK2dbMtezMn/Pw7MppZGWkw6pWIzj2Gpnvfm8d3YXM9FTYODQrsmMpTRq0aAcTc0sYlzXF04d38NefKxD7JApDvn/b45b0Mh5G7xQOAMRCIunli1zbS4iPw7ULpzHQz7/4k/9M1albFzN+DkClSraIi4vDqhXL4DWgL3b8tQcG7/TgqLuPqR3yev+RSpV//wkLC4O5uTnKli2LNm3aYObMmShX7m1vXXh4OMqUKSMWDgDg4uICDQ0NnDlzBl26dEF4eDhatGgBHR0dMcbV1RVz5szBy5cvUbZsWYSHh8PPz09uv66urti9e7dCuar0DpO3bt1CzZo10aJFC9SpUwctW7bEs2f/dX0mJibCy8vrg9sICAiAsbGx3GPenIAPrvMpyc4WUNO+FkaN9kPNmvbo3rMXunbviW1bN6s6tc/S3RN7EP/wJpy9f0LbsQtRp7M3InesRMzNyFyxWelpeBRxHJWc2uW5rXoeg9Fm7CI4e0/G6+fPcOmv3/OMi4oIw/VDm+A0YCJ0jcoU4dGUHs1cO8P+Syd8UakKGrZ0Rf/vfsK/p48j7tljpbZ35sgB6BkYoq5Ti4KD1VSz5i3R3tUN1e1qoGmz5li6YjVevUrCweDcg07VmcZHPPJ6/wkIUO7956uvvsKff/6J0NBQzJkzB8eOHYObmxuysrIAANHR0TA3N5dbR0tLCyYmJoiOjhZjLCws5GJyfi4oJmd5Yam052HixImoXbs2zp8/j4SEBIwePRpNmzZFWFgYKlSoUKhtTJo0KVcVJWh+Hr0OAGBmZobKVeSvkVeuXBmHQw6qKKPPV1Z6Gq7sWwdnrx9gVashAMDY2haJT+7hdtguWNg5yMU//vcfZGakoWLDvAfc6crKQldWFjKL8tDRN8SxX79HjXa9oWf83yfkRxeO48KWX+Hk+X2u7VP+KlV/28sYF/0EZlY2kJU1wcPb1+RikhLiASDXOAlBEHA6dB8atXKFlrZ2ySRcCshkMlSsWAmPoqJUnconRfIRXQ95vf8o2+vQu3dv8d916tRB3bp1UaVKFYSFhaFt27ZK51hcVNrzcOrUKQQEBMDU1BRVq1bFnj174OrqiubNm+PevXuF2oZUKoVMJpN7fC6XLADA4cv6eHD/vlzbwwcPYG39hYoy+nxlZ2dByMqE5L2J2xINDQjZ2bniH5wJgXWtRpAaFjyzRRCEt/vIyhDbHl04hvObF6NR//FisUKF8/j+bQCA8f8LA1u72ngadQ+vEl6KMTciz0FX3wCW5SvJrXv7ykXEPXsMZ5dOJZZvafAmORmPHj3iAMoiVJzvP5UrV4apqSnu3LkDALC0tERsbKxcTGZmJuLj48VxEpaWloiJiZGLyfm5oJj8xlrkR6XFQ0pKCrS0/uv8kEgkWLFiBTp16oSWLVvi1q1bKsyuZPQb4InLl/7F76tXIurhQ+zfuwfbt29Fr2/6qDq1T1JmWgoSntxDwpO3xeWbFzFIeHIPb17GQltXH6ZVauPy34GIu3MZyS+i8eDsYTw8fxTWdeVnC7yOe4rn966iUuP2ufbx7Np5PDhzGInPHiI5PgbPrp7DxW3LUc62JgxM3nb3RUWE4dyGhaj79SCYVLRDatJLpCa9REZKcvGfhBKWlvIGj+/dwuN7b/8eX8Q+xeN7txAf97abM/lVEh7fu4XoR2+L4JinUXh875Y4ViHu2WMc2BKIqDs38CLmGS6dPYF1i2agai0HfFGpKgCgpkMjWNpUwtpF0/H4/m1cu3gGezeuRgu3rtDW1pHLJ/zwXlSqbg/ripVL6hR8lubPm4Pz587iyZPHiLx4AWO+84WmpgbcOnRUdWqfFMlHPIrT48eP8eLFC1hZWQEAnJ2dkZCQgIiICDHmyJEjyM7OhpOTkxhz/PhxZGT89yEnJCQEdnZ2KFu2rBgTGhoqt6+QkBA4O+c/oyovEiHnI5UKNGrUCCNHjkT//v1zLfP19cWGDRuQlJQkXvMprNTMosqwZBwLO4olixYg6uEDfGFjg/4DvD672RbTD5VMoRd35zKOL8t9r4GKDdugQZ8xSE16iSv71iLm5kWkv3kN/bJmsHX+CtVadpbrnryy709EnT8Kt5/WQKIhX0PH3r6Eq/vX4VX0I2RlZUC/jCms6zjDzqU7dPTeDjQ7tnQSnt+9km8eJaG1rUnBQUXg1uULWPJT7sGiTq3d0P+7yTgdug/rf819zw23XoPg/o03XsbFYO2i6XgadQ/pqakoa2qOek4t4NpzIPT0DcT4+NhobF45D7evXIRUVw+NWruh84D/bhIFACnJr/GD19foPng0mrb/ungO+AOaVzMt8X0qa8K4Mbhw/hwSEhJQ1sQEX9Z3xMhRY1C+kJeEPxW6xXxxfX2EcuNuAKCfo02hY1+/fi32Inz55ZdYsGABWrduDRMTE5iYmGDatGno1q0bLC0tcffuXUyYMAGvXr3C5cuXxd4MNzc3xMTEYOXKleJUzQYNGohTNRMTE2FnZ4f27dtj4sSJuHLlCgYNGoSFCxfKTdVs2bIlZs+eDXd3d2zevBmzZs1SeKqmSouHgIAAnDhxAvv3789z+YgRI7By5Upk59Hl/CGfW/FQGpRU8UD/Kanigf7zORUPpUVxFw8bPqJ46KtA8RAWFobWrVvnavf09MSKFSvg4eGBixcvIiEhAdbW1mjfvj1mzJghN7gxPj4evr6+cjeJWrJkSb43iTI1NcXIkSMxceJEuX1u27YNkydPFm8SNXfuXIVvEqXS4qG4sHgoeSweSh6Lh5LH4qHkFXfxsPGC8sVDn/qFLx5KG5Xf54GIiEhVPma2hTpT6YBJIiIi+vyw54GIiNQWP0Erh8UDERGpLV62UA6LByIiUlssHZTD4oGIiNQWex6Uw+KBiIjUFsc8KIfnjYiIiBTCngciIlJbvGyhHBYPRESktlg6KIfFAxERqS12PCiHxQMREaktDfY9KIXFAxERqS32PCiHsy2IiIhIIex5ICIitSXhZQulsHggIiK1xcsWymHxQEREaosDJpXD4oGIiNQWex6Uw+KBiIjUFosH5XC2BRERESmEPQ9ERKS2ONtCOSweiIhIbWmwdlAKiwciIlJb7HlQDosHIiJSWxwwqRwOmCQiIiKFsOeBiIjUFi9bKIfFAxERqS0OmFQOiwciIlJb7HlQDsc8EBGR2pJIlH8o4vjx4+jUqROsra0hkUiwe/duueWCIGDKlCmwsrKCnp4eXFxccPv2bbmY+Ph49O3bFzKZDGXKlIG3tzdev34tF3Pp0iU0b94curq6KF++PObOnZsrl23btqFGjRrQ1dVFnTp1sH//fsUOBiweiIhIjUk+4qGI5ORk1KtXD8uWLctz+dy5c7FkyRKsXLkSZ86cgYGBAVxdXZGamirG9O3bF1evXkVISAj27t2L48ePY+jQoeLypKQktG/fHhUrVkRERATmzZuHqVOnYvXq1WLMqVOn8M0338Db2xsXL16Eh4cHPDw8cOXKFYWORyIIgqDgOfjkpWaqOgP1M/3QLVWnoHZa25qoOgW107yaqapTUDu6xXxx/Z/bL5Vet2m1skqtJ5FIsGvXLnh4eAB42+tgbW2NsWPHYty4cQCAxMREWFhYICgoCL1798b169dhb2+Pc+fOoUGDBgCA4OBgdOjQAY8fP4a1tTVWrFiBH3/8EdHR0dDR0QEAfP/999i9ezdu3LgBAOjVqxeSk5Oxd+9eMZ/GjRvDwcEBK1euLPQxsOeBiIjUloZEovQjLS0NSUlJco+0tDSFc7h//z6io6Ph4uIithkbG8PJyQnh4eEAgPDwcJQpU0YsHADAxcUFGhoaOHPmjBjTokULsXAAAFdXV9y8eRMvX74UY97dT05Mzn4KiwMmqUhMaV9d1SkQESnsY4ZLBgQEYNq0aXJt/v7+mDp1qkLbiY6OBgBYWFjItVtYWIjLoqOjYW5uLrdcS0sLJiYmcjG2tra5tpGzrGzZsoiOjv7gfgqLxQMREamvj6geJk2aBD8/P7k2qVT6kQl9Hlg8EBGR2vqYqZpSqbRIigVLS0sAQExMDKysrMT2mJgYODg4iDGxsbFy62VmZiI+Pl5c39LSEjExMXIxOT8XFJOzvLA45oGIiNRWSU3V/BBbW1tYWloiNDRUbEtKSsKZM2fg7OwMAHB2dkZCQgIiIiLEmCNHjiA7OxtOTk5izPHjx5GRkSHGhISEwM7ODmXLlhVj3t1PTkzOfgqLxQMREVExe/36NSIjIxEZGQng7SDJyMhIREVFQSKRYPTo0Zg5cyb+/vtvXL58GQMGDIC1tbU4I6NmzZr46quvMGTIEJw9exb//PMPfH190bt3b1hbWwMA+vTpAx0dHXh7e+Pq1avYsmULFi9eLHdp5bvvvkNwcDDmz5+PGzduYOrUqTh//jx8fX0VOh5O1SQiok9WcU/VPHcvUel1G1Y2LnRsWFgYWrdunavd09MTQUFBEAQB/v7+WL16NRISEtCsWTMsX74c1av/Nxg9Pj4evr6+2LNnDzQ0NNCtWzcsWbIEhoaGYsylS5fg4+ODc+fOwdTUFCNHjsTEiRPl9rlt2zZMnjwZDx48QLVq1TB37lx06NBBoWNn8UBERJ+sYi8e7n9E8WBb+OKhtOGASSIiUlv8bgvlsHggIiK1VZQDH9UJiwciIlJbrB2Uw9kWREREpBD2PBARkfpi14NSWDwQEZHa4oBJ5bB4ICIitcUBk8ph8UBERGqLtYNyWDwQEZH6YvWgFM62ICIiIoWw54GIiNQWB0wqh8UDERGpLQ6YVA6LByIiUlusHZTD4oGIiNQXqwelsHggIiK1xTEPyuFsCyIiIlIIex6IiEhtccCkclg8EBGR2mLtoBwWD0REpL5YPSiFxQMREaktDphUDosHIiJSWxzzoBzOtiAiIiKFsOeBiIjUFjselMPigYiI1BerB6WweCAiIrXFAZPKYfFARERqiwMmlcMBk5+IzRs3wK1dGzT8sg769u6By5cuqTqlUmPNb6vQp2c3ODf8Eq2aO2P0yBF4cP+eXIz3wP6oV8tO7jFj2hQVZfz5izh/DiNHDINLq2aoV8sOR0IPyy1/8fw5fvrhe7i0agYnx3oYPtQbDx8+UE2ypVRhnvf09qqFsg91xuLhExB8YD9+mRuAb0f4YPO2XbCzq4Hh33rjxYsXqk6tVDh/7ix6fdMX6zZtxarfApGZmYlhQ7zx5s0bubhu3XsiNOyk+BgzdoKKMv78paS8gZ2dHSZN9s+1TBAEjB7lg8ePH2HRr8uxZfsuWFl/gW+9vXL9Tkh5hX3eU8mYOnUqJBKJ3KNGjRri8tTUVPj4+KBcuXIwNDREt27dEBMTI7eNqKgouLu7Q19fH+bm5hg/fjwyMzPlYsLCwlC/fn1IpVJUrVoVQUFBxXI8vGzxCVi3NhBdu/eER5duAIDJ/tNw/HgYdu/cAe8hQ1Wc3edvxeo1cj9P/3k2Wjd3xvVrV+HYoKHYrqurC1Mzs5JOr1Rq1rwlmjVvmeeyhw8f4NK/kdjx115UrVoNADB5ylS0adkUwfv3oWv3HiWZaqlV2Oe92ivBLoRatWrh8OH/euG0tP57Cx4zZgz27duHbdu2wdjYGL6+vujatSv++ecfAEBWVhbc3d1haWmJU6dO4dmzZxgwYAC0tbUxa9YsAMD9+/fh7u6OYcOGYcOGDQgNDcXgwYNhZWUFV1fXIj0W9jyoWEZ6Oq5fu4rGzk3ENg0NDTRu3ASX/r2owsxKr9evXgEAZMbGcu379+1By6ZO6Nq5IxYvnI+UlBRVpFfqZaSnAwCkOlKxTUNDAzo6Orh4IUJVaZV6+T3v1Z3kI/5TlJaWFiwtLcWHqakpACAxMRFr1qzBggUL0KZNGzg6OiIwMBCnTp3C6dOnAQCHDh3CtWvXsH79ejg4OMDNzQ0zZszAsmXLkP7/v6mVK1fC1tYW8+fPR82aNeHr64vu3btj4cKFRXfC/k/lxcP169cRGBiIGzduAABu3LiB4cOHY9CgQThy5EiB66elpSEpKUnukZaWVtxpF5mXCS+RlZWFcuXKybWXK1cOz58/V1FWpVd2djbmzpkFhy/ro1q16mK7W4eO+Hn2PPwe+Ce8hwzF3j1/4Yfvx6sw09Krkm1lWFlZY8mi+UhKTERGejr++H01YqKjERcXp+r0SqX8nvf0dsCksg9F339u374Na2trVK5cGX379kVUVBQAICIiAhkZGXBxcRFja9SogQoVKiA8PBwAEB4ejjp16sDCwkKMcXV1RVJSEq5evSrGvLuNnJicbRQllRYPwcHBcHBwwLhx4/Dll18iODgYLVq0wJ07d/Dw4UO0b9++wAIiICAAxsbGco95cwJK6AjoczNr5jTcvX0bc3+Rr8S79+yFps2ao1p1O7h3/BozZ83BkcMhePT/P24qOtra2liw+Fc8fPAAzZs0glMDB5w7ewbNmreAhoa6D0MrHvk97+njBkzm9f4TEJD3+4+TkxOCgoIQHByMFStW4P79+2jevDlevXqF6Oho6OjooEyZMnLrWFhYIDo6GgAQHR0tVzjkLM9Z9qGYpKSkIu9JVemYh+nTp2P8+PGYOXMmNm/ejD59+mD48OH4+eefAQCTJk3C7Nmz0aZNm3y3MWnSJPj5+cm1CZrSfKI/PWXLlIWmpmauwZEvXrwQu7SoaMyaOR3Hj4Xhj7XrYWFp+cHYOnXrAQCioh6ifIUKJZGeWrGvVRtbd/6FV69eISMjAyYmJujbuwdq1aqt6tRKHUWe92rpI+rVvN5/pNK833/c3NzEf9etWxdOTk6oWLEitm7dCj09PeWTUBGV9jxcvXoVAwcOBAD07NkTr169Qvfu3cXlffv2xaUCpixKpVLIZDK5R36/vE+Rto4OatrXwpnT/3UrZWdn48yZcNSt96UKMys9BEHArJnTcSQ0BL/9sRY2NuULXOfmjesAADMOoCxWRkZGMDExwcOHD3Dt6hW0atNW1SmVGso870kxH/P+U6ZMGVSvXh137tyBpaUl0tPTkZCQIBcTExMDy/8XfJaWlrlmX+T8XFCMTCYr8gJF5WMeJP+/Q4eGhgZ0dXVh/M5gHiMjIyQmJqoqtRLT39MLO7dvxd+7d+He3buYOX0qUlJS4NGlq6pTKxVmzZiG/Xv/xuy582Ggb4DncXF4HheH1NRUAMCjqCisWrEM165ewZMnjxF2JBSTf5gIxwYNUd2uRgFbp7y8SU7GjevXceP62yLsyePHuHH9Op49fQoAOHTwAM6dPYPHjx7h6JHDGDZ4EFq3cUGTps1UmXapUtDznt4qyQGT73r9+jXu3r0LKysrODo6QltbG6GhoeLymzdvIioqCs7OzgAAZ2dnXL58GbGxsWJMSEgIZDIZ7O3txZh3t5ETk7ONoiQRBEEo8q0WUr169TBnzhx89dVXAIArV66gRo0a4vSVEydOwNPTE/fuKXZjk9TMgmM+NZs2rMfawDV4/jwOdjVqYuIPk1H3/13n9HHq1bLLs336zAB07tIV0c+e4Yfvx+PO7dtISXkDS0srtGnrgiHDRsDQ0LCEsy0dzp09g8FeA3K1f925C2bMmo0N6//E2sA1ePH8BczMzNDx6874dtgIaOvoqCDb0qmg5/3nQreYL65HxSs/wL6CSeF7uceNG4dOnTqhYsWKePr0Kfz9/REZGYlr167BzMwMw4cPx/79+xEUFASZTIaRI0cCAE6dOgXg7VRNBwcHWFtbY+7cuYiOjkb//v0xePBguamatWvXho+PjzjpYNSoUdi3b1+RT9VUafGwcuVKlC9fHu7u7nku/+GHHxAbG4vff/9doe1+jsUDERHlVtzFw6OPKB7KK1A89O7dG8ePH8eLF28L5mbNmuHnn39GlSpVALy9SdTYsWOxadMmpKWlwdXVFcuXLxcvSQDAw4cPMXz4cISFhcHAwACenp6YPXu23P0iwsLCMGbMGFy7dg02Njb46aefxOEBRUmlxUNxYfFARFQ6FHfx8Pil8sWDTdnPZ3xdUeMdJomISI1xerAyVD5gkoiIiD4v7HkgIiK1xa/kVg6LByIiUlusHZTD4oGIiNQWex6Uw+KBiIjU1sfe7EldsXggIiL1xdpBKZxtQURERAphzwMREaktdjwoh8UDERGpLQ6YVA6LByIiUlscMKkcFg9ERKS+WDsohcUDERGpLdYOyuFsCyIiIlIIex6IiEhtccCkclg8EBGR2uKASeWweCAiIrXFngflcMwDERERKYQ9D0REpLbY86Ac9jwQERGRQtjzQEREaosDJpXD4oGIiNQWL1soh8UDERGpLdYOymHxQERE6ovVg1I4YJKIiIgUwp4HIiJSWxwwqRwWD0REpLY4YFI5LB6IiEhtsXZQDsc8EBGR+pJ8xEMJy5YtQ6VKlaCrqwsnJyecPXv2Y49AJVg8EBGR2pJ8xH+K2rJlC/z8/ODv748LFy6gXr16cHV1RWxsbDEcWfGSCIIgqDqJopaaqeoMiIioKOgW88X1lAzl19XTVizeyckJDRs2xNKlSwEA2dnZKF++PEaOHInvv/9e+URUgD0PRESktiQS5R9paWlISkqSe6SlpeW5n/T0dERERMDFxUVs09DQgIuLC8LDw0vqcItMqRwwWdyVanFJS0tDQEAAJk2aBKlUqup01ALPecnjOS95POf5+5j3i6kzAzBt2jS5Nn9/f0ydOjVX7PPnz5GVlQULCwu5dgsLC9y4cUP5JFSkVF62+FwlJSXB2NgYiYmJkMlkqk5HLfCclzye85LHc1480tLScvU0SKXSPAu0p0+f4osvvsCpU6fg7Owstk+YMAHHjh3DmTNnij3fovSZfkYnIiJSrfwKhbyYmppCU1MTMTExcu0xMTGwtLQsjvSKFcc8EBERFTMdHR04OjoiNDRUbMvOzkZoaKhcT8Tngj0PREREJcDPzw+enp5o0KABGjVqhEWLFiE5ORleXl6qTk1hLB4+IVKpFP7+/hzQVIJ4zksez3nJ4zn/NPTq1QtxcXGYMmUKoqOj4eDggODg4FyDKD8HHDBJRERECuGYByIiIlIIiwciIiJSCIsHIiIiUgiLByIiIlIIi4dPRGn5mtbPxfHjx9GpUydYW1tDIpFg9+7dqk6pVAsICEDDhg1hZGQEc3NzeHh44ObNm6pOq1RbsWIF6tatC5lMBplMBmdnZxw4cEDVaVEpweLhE1Cavqb1c5GcnIx69eph2bJlqk5FLRw7dgw+Pj44ffo0QkJCkJGRgfbt2yM5OVnVqZVaNjY2mD17NiIiInD+/Hm0adMGnTt3xtWrV1WdGpUCnKr5CShNX9P6OZJIJNi1axc8PDxUnYraiIuLg7m5OY4dO4YWLVqoOh21YWJignnz5sHb21vVqdBnjj0PKlbavqaVqDASExMBvH0zo+KXlZWFzZs3Izk5+bO8FTJ9eniHSRUrbV/TSlSQ7OxsjB49Gk2bNkXt2rVVnU6pdvnyZTg7OyM1NRWGhobYtWsX7O3tVZ0WlQIsHoioRPn4+ODKlSs4efKkqlMp9ezs7BAZGYnExERs374dnp6eOHbsGAsI+mgsHlSstH1NK9GH+Pr6Yu/evTh+/DhsbGxUnU6pp6Ojg6pVqwIAHB0dce7cOSxevBirVq1ScWb0ueOYBxUrbV/TSpQXQRDg6+uLXbt24ciRI7C1tVV1SmopOzsbaWlpqk6DSgH2PHwCStPXtH4uXr9+jTt37og/379/H5GRkTAxMUGFChVUmFnp5OPjg40bN+Kvv/6CkZERoqOjAQDGxsbQ09NTcXal06RJk+Dm5oYKFSrg1atX2LhxI8LCwnDw4EFVp0alAKdqfiKWLl2KefPmiV/TumTJEjg5Oak6rVIrLCwMrVu3ztXu6emJoKCgkk+olJNIJHm2BwYGYuDAgSWbjJrw9vZGaGgonj17BmNjY9StWxcTJ05Eu3btVJ0alQIsHoiIiEghHPNARERECmHxQERERAph8UBEREQKYfFARERECmHxQERERAph8UBEREQKYfFARERECmHxQERERAph8UD0mRk4cCA8PDzEn1u1aoXRo0cXat2wsDBIJBIkJCQUS25EpB5YPBAVkYEDB0IikUAikYjfZjh9+nRkZmYW63537tyJGTNmFOs+iIjexS/GIipCX331FQIDA5GWlob9+/fDx8cH2tramDRpklxceno6dHR0imSfJiYmRbIdIqLCYs8DURGSSqWwtLRExYoVMXz4cLi4uODvv/8WLzX8/PPPsLa2hp2dHQDg0aNH6NmzJ8qUKQMTExN07twZDx48ELeXlZUFPz8/lClTBuXKlcOECRPw/tfRvH/ZIi0tDRMnTkT58uUhlUpRtWpVrFmzRm6diIgINGjQAPr6+mjSpAlu3rwpt3zFihWoUqUKdHR0YGdnh3Xr1hXtiSKizxqLB6JipKenh/T0dABAaGgobt68iZCQEOzduxcZGRlwdXWFkZERTpw4gX/++QeGhob46quvxHXmz5+PoKAg/PHHHzh58iTi4+Oxa9euD+5zwIAB2LRpE5YsWYLr169j1apVMDQ0lIv58ccfMX/+fJw/fx5aWloYNGiQuGzXrl347rvvMHbsWFy5cgXffvstvLy8cPTo0SI+O0T02RKIqEh4enoKnTt3FgRBELKzs4WQkBBBKpUK48aNEzw9PQULCwshLS1NjF+3bp1gZ2cnZGdni21paWmCnp6ecPDgQUEQBMHKykqYO3euuDwjI0OwsbER9yMIgtCyZUvhu+++EwRBEG7evCkAEEJCQvLM8ejRowIA4fDhw2Lbvn37BABCSkqKIAiC0KRJE2HIkCFy6/Xo0UPo0KGD4ieFiEol9jwQFaG9e/fC0NAQurq6cHNzQ69evTB16lQAQJ06deTGOfz777+4c+cOjIyMYGhoCENDQ5iYmCA1NRV3795FYmIinj17BicnJ3EdLS0tNGjQIN/9R0ZGQlNTEy1btvxgnnXr1hX/bWVlBQCIjY0FAFy/fh1NmzaVi2/atCmuX79euJNARKUeB0wSFaHWrVtjxYoV0NHRgbW1NbS0/vsTMzAwkIt9/fo1HB0dsWHDhlzbMTMzU2r/enp6hYrT1tYW/y2RSAAA2dnZSu2TiNQPex6IipCBgQGqVq2KChUqyBUOealfvz5u374Nc3NzVK1aVe5hbGwMY2NjWFlZ4cyZM+I6mZmZiIiIyHebderUQXZ2No4dO6b0MdSsWRP//POPXNs///wDe3t7pbdJRKULiwciFenbty9MTU3RuXNnnDhxAvfv30dYWBhGjRqFx48fAwC+++47zJ49G7t378aNGzcwYsSID97gqVKlSvD09MSgQYOwe/ducZtbt24tdF7jx49HUFAQVqxYgdu3b2PBggXYuXMnxo0b97GHTESlBIsHIhXR19fH8ePHUaFCBXTt2hU1a9aEt7c3UlNTIZPJAABjx45F//794enpCWdnZxgZGaFLly4f3O6KFSvQvXt3jBgxAjVq1MCQIUOQnJxc6Lw8PDywePFi/PLLL6hVqxZWrVqFwMBAtGrV6mMOl4hKEYkgvDdpnIiIiOgD2PNARERECmHxQERERAph8UBEREQKYfFARERECmHxQERERAph8UBEREQKYfFARERECmHxQERERAph8UBEREQKYfFARERECmHxQERERAr5H0rmV9vnrFMsAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-ce46f6056857>:59: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=X.columns, y=importances, palette=\"viridis\")\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 128678 (\\N{VERTICAL TRAFFIC LIGHT}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-ce46f6056857>:67: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=df['hour'], palette=\"coolwarm\")\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 9200 (\\N{ALARM CLOCK}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}